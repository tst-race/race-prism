#  Copyright (c) 2023 SRI International.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#  http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _networkManagerPluginBindings
else:
    import _networkManagerPluginBindings

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _networkManagerPluginBindings.delete_SwigPyIterator

    def value(self):
        return _networkManagerPluginBindings.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _networkManagerPluginBindings.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _networkManagerPluginBindings.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _networkManagerPluginBindings.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _networkManagerPluginBindings.SwigPyIterator_equal(self, x)

    def copy(self):
        return _networkManagerPluginBindings.SwigPyIterator_copy(self)

    def next(self):
        return _networkManagerPluginBindings.SwigPyIterator_next(self)

    def __next__(self):
        return _networkManagerPluginBindings.SwigPyIterator___next__(self)

    def previous(self):
        return _networkManagerPluginBindings.SwigPyIterator_previous(self)

    def advance(self, n):
        return _networkManagerPluginBindings.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _networkManagerPluginBindings.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _networkManagerPluginBindings.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _networkManagerPluginBindings.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _networkManagerPluginBindings.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _networkManagerPluginBindings.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _networkManagerPluginBindings.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _networkManagerPluginBindings:
_networkManagerPluginBindings.SwigPyIterator_swigregister(SwigPyIterator)

class ChannelRoleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _networkManagerPluginBindings.ChannelRoleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _networkManagerPluginBindings.ChannelRoleVector___nonzero__(self)

    def __bool__(self):
        return _networkManagerPluginBindings.ChannelRoleVector___bool__(self)

    def __len__(self):
        return _networkManagerPluginBindings.ChannelRoleVector___len__(self)

    def __getslice__(self, i, j):
        return _networkManagerPluginBindings.ChannelRoleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _networkManagerPluginBindings.ChannelRoleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _networkManagerPluginBindings.ChannelRoleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _networkManagerPluginBindings.ChannelRoleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _networkManagerPluginBindings.ChannelRoleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _networkManagerPluginBindings.ChannelRoleVector___setitem__(self, *args)

    def pop(self):
        return _networkManagerPluginBindings.ChannelRoleVector_pop(self)

    def append(self, x):
        return _networkManagerPluginBindings.ChannelRoleVector_append(self, x)

    def empty(self):
        return _networkManagerPluginBindings.ChannelRoleVector_empty(self)

    def size(self):
        return _networkManagerPluginBindings.ChannelRoleVector_size(self)

    def swap(self, v):
        return _networkManagerPluginBindings.ChannelRoleVector_swap(self, v)

    def begin(self):
        return _networkManagerPluginBindings.ChannelRoleVector_begin(self)

    def end(self):
        return _networkManagerPluginBindings.ChannelRoleVector_end(self)

    def rbegin(self):
        return _networkManagerPluginBindings.ChannelRoleVector_rbegin(self)

    def rend(self):
        return _networkManagerPluginBindings.ChannelRoleVector_rend(self)

    def clear(self):
        return _networkManagerPluginBindings.ChannelRoleVector_clear(self)

    def get_allocator(self):
        return _networkManagerPluginBindings.ChannelRoleVector_get_allocator(self)

    def pop_back(self):
        return _networkManagerPluginBindings.ChannelRoleVector_pop_back(self)

    def erase(self, *args):
        return _networkManagerPluginBindings.ChannelRoleVector_erase(self, *args)

    def __init__(self, *args):
        _networkManagerPluginBindings.ChannelRoleVector_swiginit(self, _networkManagerPluginBindings.new_ChannelRoleVector(*args))

    def push_back(self, x):
        return _networkManagerPluginBindings.ChannelRoleVector_push_back(self, x)

    def front(self):
        return _networkManagerPluginBindings.ChannelRoleVector_front(self)

    def back(self):
        return _networkManagerPluginBindings.ChannelRoleVector_back(self)

    def assign(self, n, x):
        return _networkManagerPluginBindings.ChannelRoleVector_assign(self, n, x)

    def resize(self, *args):
        return _networkManagerPluginBindings.ChannelRoleVector_resize(self, *args)

    def insert(self, *args):
        return _networkManagerPluginBindings.ChannelRoleVector_insert(self, *args)

    def reserve(self, n):
        return _networkManagerPluginBindings.ChannelRoleVector_reserve(self, n)

    def capacity(self):
        return _networkManagerPluginBindings.ChannelRoleVector_capacity(self)
    __swig_destroy__ = _networkManagerPluginBindings.delete_ChannelRoleVector

# Register ChannelRoleVector in _networkManagerPluginBindings:
_networkManagerPluginBindings.ChannelRoleVector_swigregister(ChannelRoleVector)

class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _networkManagerPluginBindings.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _networkManagerPluginBindings.StringVector___nonzero__(self)

    def __bool__(self):
        return _networkManagerPluginBindings.StringVector___bool__(self)

    def __len__(self):
        return _networkManagerPluginBindings.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _networkManagerPluginBindings.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _networkManagerPluginBindings.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _networkManagerPluginBindings.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _networkManagerPluginBindings.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _networkManagerPluginBindings.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _networkManagerPluginBindings.StringVector___setitem__(self, *args)

    def pop(self):
        return _networkManagerPluginBindings.StringVector_pop(self)

    def append(self, x):
        return _networkManagerPluginBindings.StringVector_append(self, x)

    def empty(self):
        return _networkManagerPluginBindings.StringVector_empty(self)

    def size(self):
        return _networkManagerPluginBindings.StringVector_size(self)

    def swap(self, v):
        return _networkManagerPluginBindings.StringVector_swap(self, v)

    def begin(self):
        return _networkManagerPluginBindings.StringVector_begin(self)

    def end(self):
        return _networkManagerPluginBindings.StringVector_end(self)

    def rbegin(self):
        return _networkManagerPluginBindings.StringVector_rbegin(self)

    def rend(self):
        return _networkManagerPluginBindings.StringVector_rend(self)

    def clear(self):
        return _networkManagerPluginBindings.StringVector_clear(self)

    def get_allocator(self):
        return _networkManagerPluginBindings.StringVector_get_allocator(self)

    def pop_back(self):
        return _networkManagerPluginBindings.StringVector_pop_back(self)

    def erase(self, *args):
        return _networkManagerPluginBindings.StringVector_erase(self, *args)

    def __init__(self, *args):
        _networkManagerPluginBindings.StringVector_swiginit(self, _networkManagerPluginBindings.new_StringVector(*args))

    def push_back(self, x):
        return _networkManagerPluginBindings.StringVector_push_back(self, x)

    def front(self):
        return _networkManagerPluginBindings.StringVector_front(self)

    def back(self):
        return _networkManagerPluginBindings.StringVector_back(self)

    def assign(self, n, x):
        return _networkManagerPluginBindings.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _networkManagerPluginBindings.StringVector_resize(self, *args)

    def insert(self, *args):
        return _networkManagerPluginBindings.StringVector_insert(self, *args)

    def reserve(self, n):
        return _networkManagerPluginBindings.StringVector_reserve(self, n)

    def capacity(self):
        return _networkManagerPluginBindings.StringVector_capacity(self)
    __swig_destroy__ = _networkManagerPluginBindings.delete_StringVector

# Register StringVector in _networkManagerPluginBindings:
_networkManagerPluginBindings.StringVector_swigregister(StringVector)

class ByteVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _networkManagerPluginBindings.ByteVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _networkManagerPluginBindings.ByteVector___nonzero__(self)

    def __bool__(self):
        return _networkManagerPluginBindings.ByteVector___bool__(self)

    def __len__(self):
        return _networkManagerPluginBindings.ByteVector___len__(self)

    def __getslice__(self, i, j):
        return _networkManagerPluginBindings.ByteVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _networkManagerPluginBindings.ByteVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _networkManagerPluginBindings.ByteVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _networkManagerPluginBindings.ByteVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _networkManagerPluginBindings.ByteVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _networkManagerPluginBindings.ByteVector___setitem__(self, *args)

    def pop(self):
        return _networkManagerPluginBindings.ByteVector_pop(self)

    def append(self, x):
        return _networkManagerPluginBindings.ByteVector_append(self, x)

    def empty(self):
        return _networkManagerPluginBindings.ByteVector_empty(self)

    def size(self):
        return _networkManagerPluginBindings.ByteVector_size(self)

    def swap(self, v):
        return _networkManagerPluginBindings.ByteVector_swap(self, v)

    def begin(self):
        return _networkManagerPluginBindings.ByteVector_begin(self)

    def end(self):
        return _networkManagerPluginBindings.ByteVector_end(self)

    def rbegin(self):
        return _networkManagerPluginBindings.ByteVector_rbegin(self)

    def rend(self):
        return _networkManagerPluginBindings.ByteVector_rend(self)

    def clear(self):
        return _networkManagerPluginBindings.ByteVector_clear(self)

    def get_allocator(self):
        return _networkManagerPluginBindings.ByteVector_get_allocator(self)

    def pop_back(self):
        return _networkManagerPluginBindings.ByteVector_pop_back(self)

    def erase(self, *args):
        return _networkManagerPluginBindings.ByteVector_erase(self, *args)

    def __init__(self, *args):
        _networkManagerPluginBindings.ByteVector_swiginit(self, _networkManagerPluginBindings.new_ByteVector(*args))

    def push_back(self, x):
        return _networkManagerPluginBindings.ByteVector_push_back(self, x)

    def front(self):
        return _networkManagerPluginBindings.ByteVector_front(self)

    def back(self):
        return _networkManagerPluginBindings.ByteVector_back(self)

    def assign(self, n, x):
        return _networkManagerPluginBindings.ByteVector_assign(self, n, x)

    def resize(self, *args):
        return _networkManagerPluginBindings.ByteVector_resize(self, *args)

    def insert(self, *args):
        return _networkManagerPluginBindings.ByteVector_insert(self, *args)

    def reserve(self, n):
        return _networkManagerPluginBindings.ByteVector_reserve(self, n)

    def capacity(self):
        return _networkManagerPluginBindings.ByteVector_capacity(self)
    __swig_destroy__ = _networkManagerPluginBindings.delete_ByteVector

# Register ByteVector in _networkManagerPluginBindings:
_networkManagerPluginBindings.ByteVector_swigregister(ByteVector)

class ChannelPropertiesMap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _networkManagerPluginBindings.ChannelPropertiesMap_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _networkManagerPluginBindings.ChannelPropertiesMap___nonzero__(self)

    def __bool__(self):
        return _networkManagerPluginBindings.ChannelPropertiesMap___bool__(self)

    def __len__(self):
        return _networkManagerPluginBindings.ChannelPropertiesMap___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _networkManagerPluginBindings.ChannelPropertiesMap___getitem__(self, key)

    def __delitem__(self, key):
        return _networkManagerPluginBindings.ChannelPropertiesMap___delitem__(self, key)

    def has_key(self, key):
        return _networkManagerPluginBindings.ChannelPropertiesMap_has_key(self, key)

    def keys(self):
        return _networkManagerPluginBindings.ChannelPropertiesMap_keys(self)

    def values(self):
        return _networkManagerPluginBindings.ChannelPropertiesMap_values(self)

    def items(self):
        return _networkManagerPluginBindings.ChannelPropertiesMap_items(self)

    def __contains__(self, key):
        return _networkManagerPluginBindings.ChannelPropertiesMap___contains__(self, key)

    def key_iterator(self):
        return _networkManagerPluginBindings.ChannelPropertiesMap_key_iterator(self)

    def value_iterator(self):
        return _networkManagerPluginBindings.ChannelPropertiesMap_value_iterator(self)

    def __setitem__(self, *args):
        return _networkManagerPluginBindings.ChannelPropertiesMap___setitem__(self, *args)

    def asdict(self):
        return _networkManagerPluginBindings.ChannelPropertiesMap_asdict(self)

    def __init__(self, *args):
        _networkManagerPluginBindings.ChannelPropertiesMap_swiginit(self, _networkManagerPluginBindings.new_ChannelPropertiesMap(*args))

    def empty(self):
        return _networkManagerPluginBindings.ChannelPropertiesMap_empty(self)

    def size(self):
        return _networkManagerPluginBindings.ChannelPropertiesMap_size(self)

    def swap(self, v):
        return _networkManagerPluginBindings.ChannelPropertiesMap_swap(self, v)

    def begin(self):
        return _networkManagerPluginBindings.ChannelPropertiesMap_begin(self)

    def end(self):
        return _networkManagerPluginBindings.ChannelPropertiesMap_end(self)

    def rbegin(self):
        return _networkManagerPluginBindings.ChannelPropertiesMap_rbegin(self)

    def rend(self):
        return _networkManagerPluginBindings.ChannelPropertiesMap_rend(self)

    def clear(self):
        return _networkManagerPluginBindings.ChannelPropertiesMap_clear(self)

    def get_allocator(self):
        return _networkManagerPluginBindings.ChannelPropertiesMap_get_allocator(self)

    def count(self, x):
        return _networkManagerPluginBindings.ChannelPropertiesMap_count(self, x)

    def erase(self, *args):
        return _networkManagerPluginBindings.ChannelPropertiesMap_erase(self, *args)

    def find(self, x):
        return _networkManagerPluginBindings.ChannelPropertiesMap_find(self, x)

    def lower_bound(self, x):
        return _networkManagerPluginBindings.ChannelPropertiesMap_lower_bound(self, x)

    def upper_bound(self, x):
        return _networkManagerPluginBindings.ChannelPropertiesMap_upper_bound(self, x)
    __swig_destroy__ = _networkManagerPluginBindings.delete_ChannelPropertiesMap

# Register ChannelPropertiesMap in _networkManagerPluginBindings:
_networkManagerPluginBindings.ChannelPropertiesMap_swigregister(ChannelPropertiesMap)

class ChannelPropertiesVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _networkManagerPluginBindings.ChannelPropertiesVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _networkManagerPluginBindings.ChannelPropertiesVector___nonzero__(self)

    def __bool__(self):
        return _networkManagerPluginBindings.ChannelPropertiesVector___bool__(self)

    def __len__(self):
        return _networkManagerPluginBindings.ChannelPropertiesVector___len__(self)

    def __getslice__(self, i, j):
        return _networkManagerPluginBindings.ChannelPropertiesVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _networkManagerPluginBindings.ChannelPropertiesVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _networkManagerPluginBindings.ChannelPropertiesVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _networkManagerPluginBindings.ChannelPropertiesVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _networkManagerPluginBindings.ChannelPropertiesVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _networkManagerPluginBindings.ChannelPropertiesVector___setitem__(self, *args)

    def pop(self):
        return _networkManagerPluginBindings.ChannelPropertiesVector_pop(self)

    def append(self, x):
        return _networkManagerPluginBindings.ChannelPropertiesVector_append(self, x)

    def empty(self):
        return _networkManagerPluginBindings.ChannelPropertiesVector_empty(self)

    def size(self):
        return _networkManagerPluginBindings.ChannelPropertiesVector_size(self)

    def swap(self, v):
        return _networkManagerPluginBindings.ChannelPropertiesVector_swap(self, v)

    def begin(self):
        return _networkManagerPluginBindings.ChannelPropertiesVector_begin(self)

    def end(self):
        return _networkManagerPluginBindings.ChannelPropertiesVector_end(self)

    def rbegin(self):
        return _networkManagerPluginBindings.ChannelPropertiesVector_rbegin(self)

    def rend(self):
        return _networkManagerPluginBindings.ChannelPropertiesVector_rend(self)

    def clear(self):
        return _networkManagerPluginBindings.ChannelPropertiesVector_clear(self)

    def get_allocator(self):
        return _networkManagerPluginBindings.ChannelPropertiesVector_get_allocator(self)

    def pop_back(self):
        return _networkManagerPluginBindings.ChannelPropertiesVector_pop_back(self)

    def erase(self, *args):
        return _networkManagerPluginBindings.ChannelPropertiesVector_erase(self, *args)

    def __init__(self, *args):
        _networkManagerPluginBindings.ChannelPropertiesVector_swiginit(self, _networkManagerPluginBindings.new_ChannelPropertiesVector(*args))

    def push_back(self, x):
        return _networkManagerPluginBindings.ChannelPropertiesVector_push_back(self, x)

    def front(self):
        return _networkManagerPluginBindings.ChannelPropertiesVector_front(self)

    def back(self):
        return _networkManagerPluginBindings.ChannelPropertiesVector_back(self)

    def assign(self, n, x):
        return _networkManagerPluginBindings.ChannelPropertiesVector_assign(self, n, x)

    def resize(self, *args):
        return _networkManagerPluginBindings.ChannelPropertiesVector_resize(self, *args)

    def insert(self, *args):
        return _networkManagerPluginBindings.ChannelPropertiesVector_insert(self, *args)

    def reserve(self, n):
        return _networkManagerPluginBindings.ChannelPropertiesVector_reserve(self, n)

    def capacity(self):
        return _networkManagerPluginBindings.ChannelPropertiesVector_capacity(self)
    __swig_destroy__ = _networkManagerPluginBindings.delete_ChannelPropertiesVector

# Register ChannelPropertiesVector in _networkManagerPluginBindings:
_networkManagerPluginBindings.ChannelPropertiesVector_swigregister(ChannelPropertiesVector)

class ClrMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _networkManagerPluginBindings.ClrMsg_swiginit(self, _networkManagerPluginBindings.new_ClrMsg(*args))

    def getMsg(self):
        return _networkManagerPluginBindings.ClrMsg_getMsg(self)

    def getFrom(self):
        return _networkManagerPluginBindings.ClrMsg_getFrom(self)

    def getTo(self):
        return _networkManagerPluginBindings.ClrMsg_getTo(self)

    def getTime(self):
        return _networkManagerPluginBindings.ClrMsg_getTime(self)

    def getNonce(self):
        return _networkManagerPluginBindings.ClrMsg_getNonce(self)

    def getAmpIndex(self):
        return _networkManagerPluginBindings.ClrMsg_getAmpIndex(self)

    def getTraceId(self):
        return _networkManagerPluginBindings.ClrMsg_getTraceId(self)

    def getSpanId(self):
        return _networkManagerPluginBindings.ClrMsg_getSpanId(self)

    def setTraceId(self, value):
        return _networkManagerPluginBindings.ClrMsg_setTraceId(self, value)

    def setSpanId(self, value):
        return _networkManagerPluginBindings.ClrMsg_setSpanId(self, value)
    __swig_destroy__ = _networkManagerPluginBindings.delete_ClrMsg

# Register ClrMsg in _networkManagerPluginBindings:
_networkManagerPluginBindings.ClrMsg_swigregister(ClrMsg)
cvar = _networkManagerPluginBindings.cvar
NON_AMP_MESSAGE = cvar.NON_AMP_MESSAGE

class EncPkg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _networkManagerPluginBindings.EncPkg_swiginit(self, _networkManagerPluginBindings.new_EncPkg(*args))

    def getRawData(self):
        return _networkManagerPluginBindings.EncPkg_getRawData(self)

    def getCipherText(self):
        return _networkManagerPluginBindings.EncPkg_getCipherText(self)

    def getTraceId(self):
        return _networkManagerPluginBindings.EncPkg_getTraceId(self)

    def getSpanId(self):
        return _networkManagerPluginBindings.EncPkg_getSpanId(self)

    def getPackageType(self):
        return _networkManagerPluginBindings.EncPkg_getPackageType(self)

    def setTraceId(self, value):
        return _networkManagerPluginBindings.EncPkg_setTraceId(self, value)

    def setSpanId(self, value):
        return _networkManagerPluginBindings.EncPkg_setSpanId(self, value)

    def setPackageType(self, value):
        return _networkManagerPluginBindings.EncPkg_setPackageType(self, value)

    def getSize(self):
        return _networkManagerPluginBindings.EncPkg_getSize(self)
    __swig_destroy__ = _networkManagerPluginBindings.delete_EncPkg

# Register EncPkg in _networkManagerPluginBindings:
_networkManagerPluginBindings.EncPkg_swigregister(EncPkg)

LD_UNDEF = _networkManagerPluginBindings.LD_UNDEF
LD_CREATOR_TO_LOADER = _networkManagerPluginBindings.LD_CREATOR_TO_LOADER
LD_LOADER_TO_CREATOR = _networkManagerPluginBindings.LD_LOADER_TO_CREATOR
LD_BIDI = _networkManagerPluginBindings.LD_BIDI
class ChannelProperties(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _networkManagerPluginBindings.ChannelProperties_swiginit(self, _networkManagerPluginBindings.new_ChannelProperties())
    channelStatus = property(_networkManagerPluginBindings.ChannelProperties_channelStatus_get, _networkManagerPluginBindings.ChannelProperties_channelStatus_set)
    linkDirection = property(_networkManagerPluginBindings.ChannelProperties_linkDirection_get, _networkManagerPluginBindings.ChannelProperties_linkDirection_set)
    transmissionType = property(_networkManagerPluginBindings.ChannelProperties_transmissionType_get, _networkManagerPluginBindings.ChannelProperties_transmissionType_set)
    connectionType = property(_networkManagerPluginBindings.ChannelProperties_connectionType_get, _networkManagerPluginBindings.ChannelProperties_connectionType_set)
    sendType = property(_networkManagerPluginBindings.ChannelProperties_sendType_get, _networkManagerPluginBindings.ChannelProperties_sendType_set)
    multiAddressable = property(_networkManagerPluginBindings.ChannelProperties_multiAddressable_get, _networkManagerPluginBindings.ChannelProperties_multiAddressable_set)
    reliable = property(_networkManagerPluginBindings.ChannelProperties_reliable_get, _networkManagerPluginBindings.ChannelProperties_reliable_set)
    bootstrap = property(_networkManagerPluginBindings.ChannelProperties_bootstrap_get, _networkManagerPluginBindings.ChannelProperties_bootstrap_set)
    isFlushable = property(_networkManagerPluginBindings.ChannelProperties_isFlushable_get, _networkManagerPluginBindings.ChannelProperties_isFlushable_set)
    duration_s = property(_networkManagerPluginBindings.ChannelProperties_duration_s_get, _networkManagerPluginBindings.ChannelProperties_duration_s_set)
    period_s = property(_networkManagerPluginBindings.ChannelProperties_period_s_get, _networkManagerPluginBindings.ChannelProperties_period_s_set)
    mtu = property(_networkManagerPluginBindings.ChannelProperties_mtu_get, _networkManagerPluginBindings.ChannelProperties_mtu_set)
    creatorExpected = property(_networkManagerPluginBindings.ChannelProperties_creatorExpected_get, _networkManagerPluginBindings.ChannelProperties_creatorExpected_set)
    loaderExpected = property(_networkManagerPluginBindings.ChannelProperties_loaderExpected_get, _networkManagerPluginBindings.ChannelProperties_loaderExpected_set)
    supported_hints = property(_networkManagerPluginBindings.ChannelProperties_supported_hints_get, _networkManagerPluginBindings.ChannelProperties_supported_hints_set)
    maxLinks = property(_networkManagerPluginBindings.ChannelProperties_maxLinks_get, _networkManagerPluginBindings.ChannelProperties_maxLinks_set)
    creatorsPerLoader = property(_networkManagerPluginBindings.ChannelProperties_creatorsPerLoader_get, _networkManagerPluginBindings.ChannelProperties_creatorsPerLoader_set)
    loadersPerCreator = property(_networkManagerPluginBindings.ChannelProperties_loadersPerCreator_get, _networkManagerPluginBindings.ChannelProperties_loadersPerCreator_set)
    roles = property(_networkManagerPluginBindings.ChannelProperties_roles_get, _networkManagerPluginBindings.ChannelProperties_roles_set)
    currentRole = property(_networkManagerPluginBindings.ChannelProperties_currentRole_get, _networkManagerPluginBindings.ChannelProperties_currentRole_set)
    maxSendsPerInterval = property(_networkManagerPluginBindings.ChannelProperties_maxSendsPerInterval_get, _networkManagerPluginBindings.ChannelProperties_maxSendsPerInterval_set)
    secondsPerInterval = property(_networkManagerPluginBindings.ChannelProperties_secondsPerInterval_get, _networkManagerPluginBindings.ChannelProperties_secondsPerInterval_set)
    intervalEndTime = property(_networkManagerPluginBindings.ChannelProperties_intervalEndTime_get, _networkManagerPluginBindings.ChannelProperties_intervalEndTime_set)
    sendsRemainingInInterval = property(_networkManagerPluginBindings.ChannelProperties_sendsRemainingInInterval_get, _networkManagerPluginBindings.ChannelProperties_sendsRemainingInInterval_set)
    channelGid = property(_networkManagerPluginBindings.ChannelProperties_channelGid_get, _networkManagerPluginBindings.ChannelProperties_channelGid_set)
    __swig_destroy__ = _networkManagerPluginBindings.delete_ChannelProperties

# Register ChannelProperties in _networkManagerPluginBindings:
_networkManagerPluginBindings.ChannelProperties_swigregister(ChannelProperties)


def channelPropertiesToString(props):
    return _networkManagerPluginBindings.channelPropertiesToString(props)

def linkDirectionToString(linkDirection):
    return _networkManagerPluginBindings.linkDirectionToString(linkDirection)

def linkDirectionFromString(linkDirectionString):
    return _networkManagerPluginBindings.linkDirectionFromString(linkDirectionString)

def channelStaticPropertiesEqual(a, b):
    return _networkManagerPluginBindings.channelStaticPropertiesEqual(a, b)
LS_UNDEF = _networkManagerPluginBindings.LS_UNDEF
LS_CREATOR = _networkManagerPluginBindings.LS_CREATOR
LS_LOADER = _networkManagerPluginBindings.LS_LOADER
LS_BOTH = _networkManagerPluginBindings.LS_BOTH
class ChannelRole(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _networkManagerPluginBindings.ChannelRole_swiginit(self, _networkManagerPluginBindings.new_ChannelRole())
    roleName = property(_networkManagerPluginBindings.ChannelRole_roleName_get, _networkManagerPluginBindings.ChannelRole_roleName_set)
    mechanicalTags = property(_networkManagerPluginBindings.ChannelRole_mechanicalTags_get, _networkManagerPluginBindings.ChannelRole_mechanicalTags_set)
    behavioralTags = property(_networkManagerPluginBindings.ChannelRole_behavioralTags_get, _networkManagerPluginBindings.ChannelRole_behavioralTags_set)
    linkSide = property(_networkManagerPluginBindings.ChannelRole_linkSide_get, _networkManagerPluginBindings.ChannelRole_linkSide_set)
    __swig_destroy__ = _networkManagerPluginBindings.delete_ChannelRole

# Register ChannelRole in _networkManagerPluginBindings:
_networkManagerPluginBindings.ChannelRole_swigregister(ChannelRole)


def linkSideToString(linkSide):
    return _networkManagerPluginBindings.linkSideToString(linkSide)

def linkSideFromString(linkSideString):
    return _networkManagerPluginBindings.linkSideFromString(linkSideString)

def channelRoleToString(channelRole):
    return _networkManagerPluginBindings.channelRoleToString(channelRole)
CHANNEL_UNDEF = _networkManagerPluginBindings.CHANNEL_UNDEF
CHANNEL_AVAILABLE = _networkManagerPluginBindings.CHANNEL_AVAILABLE
CHANNEL_UNAVAILABLE = _networkManagerPluginBindings.CHANNEL_UNAVAILABLE
CHANNEL_ENABLED = _networkManagerPluginBindings.CHANNEL_ENABLED
CHANNEL_DISABLED = _networkManagerPluginBindings.CHANNEL_DISABLED
CHANNEL_STARTING = _networkManagerPluginBindings.CHANNEL_STARTING
CHANNEL_FAILED = _networkManagerPluginBindings.CHANNEL_FAILED
CHANNEL_UNSUPPORTED = _networkManagerPluginBindings.CHANNEL_UNSUPPORTED

def channelStatusToString(channelStatus):
    return _networkManagerPluginBindings.channelStatusToString(channelStatus)
CONNECTION_INVALID = _networkManagerPluginBindings.CONNECTION_INVALID
CONNECTION_OPEN = _networkManagerPluginBindings.CONNECTION_OPEN
CONNECTION_CLOSED = _networkManagerPluginBindings.CONNECTION_CLOSED
CONNECTION_AWAITING_CONTACT = _networkManagerPluginBindings.CONNECTION_AWAITING_CONTACT
CONNECTION_INIT_FAILED = _networkManagerPluginBindings.CONNECTION_INIT_FAILED
CONNECTION_AVAILABLE = _networkManagerPluginBindings.CONNECTION_AVAILABLE
CONNECTION_UNAVAILABLE = _networkManagerPluginBindings.CONNECTION_UNAVAILABLE

def connectionStatusToString(connectionStatus):
    return _networkManagerPluginBindings.connectionStatusToString(connectionStatus)
CT_UNDEF = _networkManagerPluginBindings.CT_UNDEF
CT_DIRECT = _networkManagerPluginBindings.CT_DIRECT
CT_INDIRECT = _networkManagerPluginBindings.CT_INDIRECT
CT_MIXED = _networkManagerPluginBindings.CT_MIXED
CT_LOCAL = _networkManagerPluginBindings.CT_LOCAL

def connectionTypeToString(connectionType):
    return _networkManagerPluginBindings.connectionTypeToString(connectionType)

def connectionTypeFromString(connectionTypeString):
    return _networkManagerPluginBindings.connectionTypeFromString(connectionTypeString)
class DeviceInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    platform = property(_networkManagerPluginBindings.DeviceInfo_platform_get, _networkManagerPluginBindings.DeviceInfo_platform_set)
    architecture = property(_networkManagerPluginBindings.DeviceInfo_architecture_get, _networkManagerPluginBindings.DeviceInfo_architecture_set)
    nodeType = property(_networkManagerPluginBindings.DeviceInfo_nodeType_get, _networkManagerPluginBindings.DeviceInfo_nodeType_set)

    def __init__(self):
        _networkManagerPluginBindings.DeviceInfo_swiginit(self, _networkManagerPluginBindings.new_DeviceInfo())
    __swig_destroy__ = _networkManagerPluginBindings.delete_DeviceInfo

# Register DeviceInfo in _networkManagerPluginBindings:
_networkManagerPluginBindings.DeviceInfo_swigregister(DeviceInfo)

class IRaceSdkApp(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _networkManagerPluginBindings.delete_IRaceSdkApp

    def getAppConfig(self):
        return _networkManagerPluginBindings.IRaceSdkApp_getAppConfig(self)

    def initRaceSystem(self, app):
        return _networkManagerPluginBindings.IRaceSdkApp_initRaceSystem(self, app)

    def prepareToBootstrap(self, deviceInfo, passphrase, bootstrapChannelId):
        return _networkManagerPluginBindings.IRaceSdkApp_prepareToBootstrap(self, deviceInfo, passphrase, bootstrapChannelId)

    def onUserInputReceived(self, handle, answered, response):
        return _networkManagerPluginBindings.IRaceSdkApp_onUserInputReceived(self, handle, answered, response)

    def onUserAcknowledgementReceived(self, handle):
        return _networkManagerPluginBindings.IRaceSdkApp_onUserAcknowledgementReceived(self, handle)

    def sendClientMessage(self, msg):
        return _networkManagerPluginBindings.IRaceSdkApp_sendClientMessage(self, msg)

    def addVoaRules(self, payload):
        return _networkManagerPluginBindings.IRaceSdkApp_addVoaRules(self, payload)

    def deleteVoaRules(self, payload):
        return _networkManagerPluginBindings.IRaceSdkApp_deleteVoaRules(self, payload)

    def setVoaActiveState(self, state):
        return _networkManagerPluginBindings.IRaceSdkApp_setVoaActiveState(self, state)

    def setEnabledChannels(self, channelGids):
        return _networkManagerPluginBindings.IRaceSdkApp_setEnabledChannels(self, channelGids)

    def enableChannel(self, channelGid):
        return _networkManagerPluginBindings.IRaceSdkApp_enableChannel(self, channelGid)

    def disableChannel(self, channelGid):
        return _networkManagerPluginBindings.IRaceSdkApp_disableChannel(self, channelGid)

    def getContacts(self):
        return _networkManagerPluginBindings.IRaceSdkApp_getContacts(self)

    def isConnected(self):
        return _networkManagerPluginBindings.IRaceSdkApp_isConnected(self)

    def cleanShutdown(self):
        return _networkManagerPluginBindings.IRaceSdkApp_cleanShutdown(self)

    def notifyShutdown(self, numSeconds):
        return _networkManagerPluginBindings.IRaceSdkApp_notifyShutdown(self, numSeconds)

# Register IRaceSdkApp in _networkManagerPluginBindings:
_networkManagerPluginBindings.IRaceSdkApp_swigregister(IRaceSdkApp)

class IRacePluginNM(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _networkManagerPluginBindings.delete_IRacePluginNM

    def init(self, pluginConfig):
        return _networkManagerPluginBindings.IRacePluginNM_init(self, pluginConfig)

    def shutdown(self):
        return _networkManagerPluginBindings.IRacePluginNM_shutdown(self)

    def processClrMsg(self, handle, msg):
        return _networkManagerPluginBindings.IRacePluginNM_processClrMsg(self, handle, msg)

    def processEncPkg(self, handle, ePkg, connIDs):
        return _networkManagerPluginBindings.IRacePluginNM_processEncPkg(self, handle, ePkg, connIDs)

    def prepareToBootstrap(self, handle, linkId, configPath, deviceInfo):
        return _networkManagerPluginBindings.IRacePluginNM_prepareToBootstrap(self, handle, linkId, configPath, deviceInfo)

    def onBootstrapPkgReceived(self, persona, pkg):
        return _networkManagerPluginBindings.IRacePluginNM_onBootstrapPkgReceived(self, persona, pkg)

    def onPackageStatusChanged(self, handle, status):
        return _networkManagerPluginBindings.IRacePluginNM_onPackageStatusChanged(self, handle, status)

    def onConnectionStatusChanged(self, handle, connId, status, linkId, properties):
        return _networkManagerPluginBindings.IRacePluginNM_onConnectionStatusChanged(self, handle, connId, status, linkId, properties)

    def onLinkPropertiesChanged(self, linkId, linkProperties):
        return _networkManagerPluginBindings.IRacePluginNM_onLinkPropertiesChanged(self, linkId, linkProperties)

    def onPersonaLinksChanged(self, recipientPersona, linkType, links):
        return _networkManagerPluginBindings.IRacePluginNM_onPersonaLinksChanged(self, recipientPersona, linkType, links)

    def onChannelStatusChanged(self, handle, channelGid, status, properties):
        return _networkManagerPluginBindings.IRacePluginNM_onChannelStatusChanged(self, handle, channelGid, status, properties)

    def onLinkStatusChanged(self, handle, linkId, status, properties):
        return _networkManagerPluginBindings.IRacePluginNM_onLinkStatusChanged(self, handle, linkId, status, properties)

    def onUserInputReceived(self, handle, answered, response):
        return _networkManagerPluginBindings.IRacePluginNM_onUserInputReceived(self, handle, answered, response)

    def onUserAcknowledgementReceived(self, handle):
        return _networkManagerPluginBindings.IRacePluginNM_onUserAcknowledgementReceived(self, handle)

    def notifyEpoch(self, data):
        return _networkManagerPluginBindings.IRacePluginNM_notifyEpoch(self, data)

    def __init__(self):
        if self.__class__ == IRacePluginNM:
            _self = None
        else:
            _self = self
        _networkManagerPluginBindings.IRacePluginNM_swiginit(self, _networkManagerPluginBindings.new_IRacePluginNM(_self, ))
    def __disown__(self):
        self.this.disown()
        _networkManagerPluginBindings.disown_IRacePluginNM(self)
        return weakref.proxy(self)

# Register IRacePluginNM in _networkManagerPluginBindings:
_networkManagerPluginBindings.IRacePluginNM_swigregister(IRacePluginNM)

class IRaceSdkCommon(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _networkManagerPluginBindings.delete_IRaceSdkCommon

    def getEntropy(self, numBytes):
        return _networkManagerPluginBindings.IRaceSdkCommon_getEntropy(self, numBytes)

    def getActivePersona(self):
        return _networkManagerPluginBindings.IRaceSdkCommon_getActivePersona(self)

    def getChannelProperties(self, channelGid):
        return _networkManagerPluginBindings.IRaceSdkCommon_getChannelProperties(self, channelGid)

    def getAllChannelProperties(self):
        return _networkManagerPluginBindings.IRaceSdkCommon_getAllChannelProperties(self)

    def asyncError(self, handle, status):
        return _networkManagerPluginBindings.IRaceSdkCommon_asyncError(self, handle, status)

    def makeDir(self, directoryPath):
        return _networkManagerPluginBindings.IRaceSdkCommon_makeDir(self, directoryPath)

    def removeDir(self, directoryPath):
        return _networkManagerPluginBindings.IRaceSdkCommon_removeDir(self, directoryPath)

    def listDir(self, directoryPath):
        return _networkManagerPluginBindings.IRaceSdkCommon_listDir(self, directoryPath)

    def readFile(self, filepath):
        return _networkManagerPluginBindings.IRaceSdkCommon_readFile(self, filepath)

    def appendFile(self, filepath, data):
        return _networkManagerPluginBindings.IRaceSdkCommon_appendFile(self, filepath, data)

    def writeFile(self, filepath, data):
        return _networkManagerPluginBindings.IRaceSdkCommon_writeFile(self, filepath, data)

# Register IRaceSdkCommon in _networkManagerPluginBindings:
_networkManagerPluginBindings.IRaceSdkCommon_swigregister(IRaceSdkCommon)
RACE_BLOCKING = cvar.RACE_BLOCKING
RACE_UNLIMITED = cvar.RACE_UNLIMITED
RACE_BATCH_ID_NULL = cvar.RACE_BATCH_ID_NULL

class IRaceSdkNM(IRaceSdkCommon):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _networkManagerPluginBindings.delete_IRaceSdkNM

    def onPluginStatusChanged(self, pluginStatus):
        return _networkManagerPluginBindings.IRaceSdkNM_onPluginStatusChanged(self, pluginStatus)

    def sendEncryptedPackage(self, ePkg, connectionId, batchId, timeout):
        return _networkManagerPluginBindings.IRaceSdkNM_sendEncryptedPackage(self, ePkg, connectionId, batchId, timeout)

    def presentCleartextMessage(self, msg):
        return _networkManagerPluginBindings.IRaceSdkNM_presentCleartextMessage(self, msg)

    def openConnection(self, linkType, linkId, linkHints, priority, sendTimeout, timeout):
        return _networkManagerPluginBindings.IRaceSdkNM_openConnection(self, linkType, linkId, linkHints, priority, sendTimeout, timeout)

    def closeConnection(self, connectionId, timeout):
        return _networkManagerPluginBindings.IRaceSdkNM_closeConnection(self, connectionId, timeout)

    def getLinksForPersonas(self, recipientPersonas, linkType):
        return _networkManagerPluginBindings.IRaceSdkNM_getLinksForPersonas(self, recipientPersonas, linkType)

    def getLinksForChannel(self, channelGid):
        return _networkManagerPluginBindings.IRaceSdkNM_getLinksForChannel(self, channelGid)

    def getLinkForConnection(self, connectionId):
        return _networkManagerPluginBindings.IRaceSdkNM_getLinkForConnection(self, connectionId)

    def getLinkProperties(self, linkId):
        return _networkManagerPluginBindings.IRaceSdkNM_getLinkProperties(self, linkId)

    def getSupportedChannels(self):
        return _networkManagerPluginBindings.IRaceSdkNM_getSupportedChannels(self)

    def deactivateChannel(self, channelGid, timeout):
        return _networkManagerPluginBindings.IRaceSdkNM_deactivateChannel(self, channelGid, timeout)

    def activateChannel(self, channelGid, roleName, timeout):
        return _networkManagerPluginBindings.IRaceSdkNM_activateChannel(self, channelGid, roleName, timeout)

    def destroyLink(self, linkId, timeout):
        return _networkManagerPluginBindings.IRaceSdkNM_destroyLink(self, linkId, timeout)

    def createLink(self, channelGid, personas, timeout):
        return _networkManagerPluginBindings.IRaceSdkNM_createLink(self, channelGid, personas, timeout)

    def loadLinkAddress(self, channelGid, linkAddress, personas, timeout):
        return _networkManagerPluginBindings.IRaceSdkNM_loadLinkAddress(self, channelGid, linkAddress, personas, timeout)

    def loadLinkAddresses(self, channelGid, linkAddresses, personas, timeout):
        return _networkManagerPluginBindings.IRaceSdkNM_loadLinkAddresses(self, channelGid, linkAddresses, personas, timeout)

    def createLinkFromAddress(self, channelGid, linkAddress, personas, timeout):
        return _networkManagerPluginBindings.IRaceSdkNM_createLinkFromAddress(self, channelGid, linkAddress, personas, timeout)

    def bootstrapDevice(self, handle, commsChannels):
        return _networkManagerPluginBindings.IRaceSdkNM_bootstrapDevice(self, handle, commsChannels)

    def bootstrapFailed(self, handle):
        return _networkManagerPluginBindings.IRaceSdkNM_bootstrapFailed(self, handle)

    def setPersonasForLink(self, linkId, personas):
        return _networkManagerPluginBindings.IRaceSdkNM_setPersonasForLink(self, linkId, personas)

    def getPersonasForLink(self, linkId):
        return _networkManagerPluginBindings.IRaceSdkNM_getPersonasForLink(self, linkId)

    def onMessageStatusChanged(self, handle, status):
        return _networkManagerPluginBindings.IRaceSdkNM_onMessageStatusChanged(self, handle, status)

    def sendBootstrapPkg(self, connectionId, persona, pkg, timeout):
        return _networkManagerPluginBindings.IRaceSdkNM_sendBootstrapPkg(self, connectionId, persona, pkg, timeout)

    def requestPluginUserInput(self, key, prompt, cache):
        return _networkManagerPluginBindings.IRaceSdkNM_requestPluginUserInput(self, key, prompt, cache)

    def requestCommonUserInput(self, key):
        return _networkManagerPluginBindings.IRaceSdkNM_requestCommonUserInput(self, key)

    def flushChannel(self, channelGid, batchId, timeout):
        return _networkManagerPluginBindings.IRaceSdkNM_flushChannel(self, channelGid, batchId, timeout)

    def displayInfoToUser(self, data, displayType):
        return _networkManagerPluginBindings.IRaceSdkNM_displayInfoToUser(self, data, displayType)

# Register IRaceSdkNM in _networkManagerPluginBindings:
_networkManagerPluginBindings.IRaceSdkNM_swigregister(IRaceSdkNM)

class LinkProperties(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _networkManagerPluginBindings.LinkProperties_swiginit(self, _networkManagerPluginBindings.new_LinkProperties())
    linkType = property(_networkManagerPluginBindings.LinkProperties_linkType_get, _networkManagerPluginBindings.LinkProperties_linkType_set)
    transmissionType = property(_networkManagerPluginBindings.LinkProperties_transmissionType_get, _networkManagerPluginBindings.LinkProperties_transmissionType_set)
    connectionType = property(_networkManagerPluginBindings.LinkProperties_connectionType_get, _networkManagerPluginBindings.LinkProperties_connectionType_set)
    sendType = property(_networkManagerPluginBindings.LinkProperties_sendType_get, _networkManagerPluginBindings.LinkProperties_sendType_set)
    reliable = property(_networkManagerPluginBindings.LinkProperties_reliable_get, _networkManagerPluginBindings.LinkProperties_reliable_set)
    isFlushable = property(_networkManagerPluginBindings.LinkProperties_isFlushable_get, _networkManagerPluginBindings.LinkProperties_isFlushable_set)
    duration_s = property(_networkManagerPluginBindings.LinkProperties_duration_s_get, _networkManagerPluginBindings.LinkProperties_duration_s_set)
    period_s = property(_networkManagerPluginBindings.LinkProperties_period_s_get, _networkManagerPluginBindings.LinkProperties_period_s_set)
    mtu = property(_networkManagerPluginBindings.LinkProperties_mtu_get, _networkManagerPluginBindings.LinkProperties_mtu_set)
    worst = property(_networkManagerPluginBindings.LinkProperties_worst_get, _networkManagerPluginBindings.LinkProperties_worst_set)
    expected = property(_networkManagerPluginBindings.LinkProperties_expected_get, _networkManagerPluginBindings.LinkProperties_expected_set)
    best = property(_networkManagerPluginBindings.LinkProperties_best_get, _networkManagerPluginBindings.LinkProperties_best_set)
    supported_hints = property(_networkManagerPluginBindings.LinkProperties_supported_hints_get, _networkManagerPluginBindings.LinkProperties_supported_hints_set)
    channelGid = property(_networkManagerPluginBindings.LinkProperties_channelGid_get, _networkManagerPluginBindings.LinkProperties_channelGid_set)
    linkAddress = property(_networkManagerPluginBindings.LinkProperties_linkAddress_get, _networkManagerPluginBindings.LinkProperties_linkAddress_set)
    __swig_destroy__ = _networkManagerPluginBindings.delete_LinkProperties

# Register LinkProperties in _networkManagerPluginBindings:
_networkManagerPluginBindings.LinkProperties_swigregister(LinkProperties)

class LinkPropertyPair(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    send = property(_networkManagerPluginBindings.LinkPropertyPair_send_get, _networkManagerPluginBindings.LinkPropertyPair_send_set)
    receive = property(_networkManagerPluginBindings.LinkPropertyPair_receive_get, _networkManagerPluginBindings.LinkPropertyPair_receive_set)

    def __init__(self):
        _networkManagerPluginBindings.LinkPropertyPair_swiginit(self, _networkManagerPluginBindings.new_LinkPropertyPair())
    __swig_destroy__ = _networkManagerPluginBindings.delete_LinkPropertyPair

# Register LinkPropertyPair in _networkManagerPluginBindings:
_networkManagerPluginBindings.LinkPropertyPair_swigregister(LinkPropertyPair)


def linkPropertyPairToString(props):
    return _networkManagerPluginBindings.linkPropertyPairToString(props)
class LinkPropertySet(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _networkManagerPluginBindings.LinkPropertySet_swiginit(self, _networkManagerPluginBindings.new_LinkPropertySet())
    bandwidth_bps = property(_networkManagerPluginBindings.LinkPropertySet_bandwidth_bps_get, _networkManagerPluginBindings.LinkPropertySet_bandwidth_bps_set)
    latency_ms = property(_networkManagerPluginBindings.LinkPropertySet_latency_ms_get, _networkManagerPluginBindings.LinkPropertySet_latency_ms_set)
    loss = property(_networkManagerPluginBindings.LinkPropertySet_loss_get, _networkManagerPluginBindings.LinkPropertySet_loss_set)
    __swig_destroy__ = _networkManagerPluginBindings.delete_LinkPropertySet

# Register LinkPropertySet in _networkManagerPluginBindings:
_networkManagerPluginBindings.LinkPropertySet_swigregister(LinkPropertySet)


def linkPropertySetToString(props):
    return _networkManagerPluginBindings.linkPropertySetToString(props)
LINK_UNDEF = _networkManagerPluginBindings.LINK_UNDEF
LINK_CREATED = _networkManagerPluginBindings.LINK_CREATED
LINK_LOADED = _networkManagerPluginBindings.LINK_LOADED
LINK_DESTROYED = _networkManagerPluginBindings.LINK_DESTROYED

def linkStatusToString(linkStatus):
    return _networkManagerPluginBindings.linkStatusToString(linkStatus)
LT_UNDEF = _networkManagerPluginBindings.LT_UNDEF
LT_SEND = _networkManagerPluginBindings.LT_SEND
LT_RECV = _networkManagerPluginBindings.LT_RECV
LT_BIDI = _networkManagerPluginBindings.LT_BIDI

def linkTypeToString(linkType):
    return _networkManagerPluginBindings.linkTypeToString(linkType)
MS_UNDEF = _networkManagerPluginBindings.MS_UNDEF
MS_SENT = _networkManagerPluginBindings.MS_SENT
MS_FAILED = _networkManagerPluginBindings.MS_FAILED

def messageStatusToString(messageStatus):
    return _networkManagerPluginBindings.messageStatusToString(messageStatus)
PACKAGE_INVALID = _networkManagerPluginBindings.PACKAGE_INVALID
PACKAGE_SENT = _networkManagerPluginBindings.PACKAGE_SENT
PACKAGE_RECEIVED = _networkManagerPluginBindings.PACKAGE_RECEIVED
PACKAGE_FAILED_GENERIC = _networkManagerPluginBindings.PACKAGE_FAILED_GENERIC
PACKAGE_FAILED_NETWORK_ERROR = _networkManagerPluginBindings.PACKAGE_FAILED_NETWORK_ERROR
PACKAGE_FAILED_TIMEOUT = _networkManagerPluginBindings.PACKAGE_FAILED_TIMEOUT

def packageStatusToString(packageStatus):
    return _networkManagerPluginBindings.packageStatusToString(packageStatus)
PKG_TYPE_UNDEF = _networkManagerPluginBindings.PKG_TYPE_UNDEF
PKG_TYPE_NM = _networkManagerPluginBindings.PKG_TYPE_NM
PKG_TYPE_TEST_HARNESS = _networkManagerPluginBindings.PKG_TYPE_TEST_HARNESS
PKG_TYPE_SDK = _networkManagerPluginBindings.PKG_TYPE_SDK

def packageTypeToString(packageType):
    return _networkManagerPluginBindings.packageTypeToString(packageType)
ST_UNDEF = _networkManagerPluginBindings.ST_UNDEF
ST_STORED_ASYNC = _networkManagerPluginBindings.ST_STORED_ASYNC
ST_EPHEM_SYNC = _networkManagerPluginBindings.ST_EPHEM_SYNC

def sendTypeToString(sendType):
    return _networkManagerPluginBindings.sendTypeToString(sendType)

def sendTypeFromString(sendTypeString):
    return _networkManagerPluginBindings.sendTypeFromString(sendTypeString)
TT_UNDEF = _networkManagerPluginBindings.TT_UNDEF
TT_UNICAST = _networkManagerPluginBindings.TT_UNICAST
TT_MULTICAST = _networkManagerPluginBindings.TT_MULTICAST

def transmissionTypeToString(transmissionType):
    return _networkManagerPluginBindings.transmissionTypeToString(transmissionType)

def transmissionTypeFromString(transmissionTypeString):
    return _networkManagerPluginBindings.transmissionTypeFromString(transmissionTypeString)
class PluginConfig(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    etcDirectory = property(_networkManagerPluginBindings.PluginConfig_etcDirectory_get, _networkManagerPluginBindings.PluginConfig_etcDirectory_set)
    loggingDirectory = property(_networkManagerPluginBindings.PluginConfig_loggingDirectory_get, _networkManagerPluginBindings.PluginConfig_loggingDirectory_set)
    auxDataDirectory = property(_networkManagerPluginBindings.PluginConfig_auxDataDirectory_get, _networkManagerPluginBindings.PluginConfig_auxDataDirectory_set)
    tmpDirectory = property(_networkManagerPluginBindings.PluginConfig_tmpDirectory_get, _networkManagerPluginBindings.PluginConfig_tmpDirectory_set)
    pluginDirectory = property(_networkManagerPluginBindings.PluginConfig_pluginDirectory_get, _networkManagerPluginBindings.PluginConfig_pluginDirectory_set)

    def __init__(self):
        _networkManagerPluginBindings.PluginConfig_swiginit(self, _networkManagerPluginBindings.new_PluginConfig())
    __swig_destroy__ = _networkManagerPluginBindings.delete_PluginConfig

# Register PluginConfig in _networkManagerPluginBindings:
_networkManagerPluginBindings.PluginConfig_swigregister(PluginConfig)

PLUGIN_INVALID = _networkManagerPluginBindings.PLUGIN_INVALID
PLUGIN_OK = _networkManagerPluginBindings.PLUGIN_OK
PLUGIN_TEMP_ERROR = _networkManagerPluginBindings.PLUGIN_TEMP_ERROR
PLUGIN_ERROR = _networkManagerPluginBindings.PLUGIN_ERROR
PLUGIN_FATAL = _networkManagerPluginBindings.PLUGIN_FATAL

def pluginResponseToString(pluginResponse):
    return _networkManagerPluginBindings.pluginResponseToString(pluginResponse)
PLUGIN_UNDEF = _networkManagerPluginBindings.PLUGIN_UNDEF
PLUGIN_NOT_READY = _networkManagerPluginBindings.PLUGIN_NOT_READY
PLUGIN_READY = _networkManagerPluginBindings.PLUGIN_READY

def pluginStatusToString(pluginStatus):
    return _networkManagerPluginBindings.pluginStatusToString(pluginStatus)
NT_ALL = _networkManagerPluginBindings.NT_ALL
NT_CLIENT = _networkManagerPluginBindings.NT_CLIENT
NT_SERVER = _networkManagerPluginBindings.NT_SERVER
NT_UNDEF = _networkManagerPluginBindings.NT_UNDEF

def nodeTypeToString(nodeType):
    return _networkManagerPluginBindings.nodeTypeToString(nodeType)

def stringToNodeType(nodeTypeString):
    return _networkManagerPluginBindings.stringToNodeType(nodeTypeString)
PT_NM = _networkManagerPluginBindings.PT_NM
PT_COMMS = _networkManagerPluginBindings.PT_COMMS
PT_ARTIFACT_MANAGER = _networkManagerPluginBindings.PT_ARTIFACT_MANAGER

def pluginTypeToString(pluginType):
    return _networkManagerPluginBindings.pluginTypeToString(pluginType)

def stringToPluginType(pluginTypeString):
    return _networkManagerPluginBindings.stringToPluginType(pluginTypeString)
PFT_SHARED_LIB = _networkManagerPluginBindings.PFT_SHARED_LIB
PFT_PYTHON = _networkManagerPluginBindings.PFT_PYTHON

def pluginFileTypeToString(pluginFileType):
    return _networkManagerPluginBindings.pluginFileTypeToString(pluginFileType)

def stringToPluginFileType(pluginFileTypeString):
    return _networkManagerPluginBindings.stringToPluginFileType(pluginFileTypeString)
ENC_AES = _networkManagerPluginBindings.ENC_AES
ENC_NONE = _networkManagerPluginBindings.ENC_NONE

def storageEncryptionTypeToString(storageEncryptionType):
    return _networkManagerPluginBindings.storageEncryptionTypeToString(storageEncryptionType)

def stringToStorageEncryptionType(storageEncryptionTypeString):
    return _networkManagerPluginBindings.stringToStorageEncryptionType(storageEncryptionTypeString)
UD_DIALOG = _networkManagerPluginBindings.UD_DIALOG
UD_QR_CODE = _networkManagerPluginBindings.UD_QR_CODE
UD_TOAST = _networkManagerPluginBindings.UD_TOAST
UD_NOTIFICATION = _networkManagerPluginBindings.UD_NOTIFICATION
UD_UNDEF = _networkManagerPluginBindings.UD_UNDEF

def userInfoDisplayTypeToString(userDisplayType):
    return _networkManagerPluginBindings.userInfoDisplayTypeToString(userDisplayType)

def stringToUserDisplayType(userDisplayTypeString):
    return _networkManagerPluginBindings.stringToUserDisplayType(userDisplayTypeString)
BS_DOWNLOAD_BUNDLE = _networkManagerPluginBindings.BS_DOWNLOAD_BUNDLE
BS_NETWORK_CONNECT = _networkManagerPluginBindings.BS_NETWORK_CONNECT
BS_COMPLETE = _networkManagerPluginBindings.BS_COMPLETE
BS_UNDEF = _networkManagerPluginBindings.BS_UNDEF

def bootstrapActionTypeToString(bootstrapActionType):
    return _networkManagerPluginBindings.bootstrapActionTypeToString(bootstrapActionType)

def __lshift__(*args):
    return _networkManagerPluginBindings.__lshift__(*args)

def stringToBootstrapActionType(bootstrapActionTypeString):
    return _networkManagerPluginBindings.stringToBootstrapActionType(bootstrapActionTypeString)
class RaceLog(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    LL_DEBUG = _networkManagerPluginBindings.RaceLog_LL_DEBUG
    LL_INFO = _networkManagerPluginBindings.RaceLog_LL_INFO
    LL_WARNING = _networkManagerPluginBindings.RaceLog_LL_WARNING
    LL_ERROR = _networkManagerPluginBindings.RaceLog_LL_ERROR

    @staticmethod
    def log(level, pluginName, message, stackTrace):
        return _networkManagerPluginBindings.RaceLog_log(level, pluginName, message, stackTrace)

    @staticmethod
    def logDebug(pluginName, message, stackTrace):
        return _networkManagerPluginBindings.RaceLog_logDebug(pluginName, message, stackTrace)

    @staticmethod
    def logInfo(pluginName, message, stackTrace):
        return _networkManagerPluginBindings.RaceLog_logInfo(pluginName, message, stackTrace)

    @staticmethod
    def logWarning(pluginName, message, stackTrace):
        return _networkManagerPluginBindings.RaceLog_logWarning(pluginName, message, stackTrace)

    @staticmethod
    def logError(pluginName, message, stackTrace):
        return _networkManagerPluginBindings.RaceLog_logError(pluginName, message, stackTrace)

    @staticmethod
    def getLogStream(level):
        return _networkManagerPluginBindings.RaceLog_getLogStream(level)

    @staticmethod
    def setLogLevel(level):
        return _networkManagerPluginBindings.RaceLog_setLogLevel(level)

    @staticmethod
    def setLogLevelStdout(level):
        return _networkManagerPluginBindings.RaceLog_setLogLevelStdout(level)

    @staticmethod
    def setLogLevelFile(level):
        return _networkManagerPluginBindings.RaceLog_setLogLevelFile(level)

    @staticmethod
    def setLogFile(file):
        return _networkManagerPluginBindings.RaceLog_setLogFile(file)

    @staticmethod
    def get_this_thread_id_prefix():
        return _networkManagerPluginBindings.RaceLog_get_this_thread_id_prefix()

    @staticmethod
    def cppDemangle(abiName):
        return _networkManagerPluginBindings.RaceLog_cppDemangle(abiName)

    def __init__(self):
        _networkManagerPluginBindings.RaceLog_swiginit(self, _networkManagerPluginBindings.new_RaceLog())
    __swig_destroy__ = _networkManagerPluginBindings.delete_RaceLog

# Register RaceLog in _networkManagerPluginBindings:
_networkManagerPluginBindings.RaceLog_swigregister(RaceLog)

def RaceLog_log(level, pluginName, message, stackTrace):
    return _networkManagerPluginBindings.RaceLog_log(level, pluginName, message, stackTrace)

def RaceLog_logDebug(pluginName, message, stackTrace):
    return _networkManagerPluginBindings.RaceLog_logDebug(pluginName, message, stackTrace)

def RaceLog_logInfo(pluginName, message, stackTrace):
    return _networkManagerPluginBindings.RaceLog_logInfo(pluginName, message, stackTrace)

def RaceLog_logWarning(pluginName, message, stackTrace):
    return _networkManagerPluginBindings.RaceLog_logWarning(pluginName, message, stackTrace)

def RaceLog_logError(pluginName, message, stackTrace):
    return _networkManagerPluginBindings.RaceLog_logError(pluginName, message, stackTrace)

def RaceLog_getLogStream(level):
    return _networkManagerPluginBindings.RaceLog_getLogStream(level)

def RaceLog_setLogLevel(level):
    return _networkManagerPluginBindings.RaceLog_setLogLevel(level)

def RaceLog_setLogLevelStdout(level):
    return _networkManagerPluginBindings.RaceLog_setLogLevelStdout(level)

def RaceLog_setLogLevelFile(level):
    return _networkManagerPluginBindings.RaceLog_setLogLevelFile(level)

def RaceLog_setLogFile(file):
    return _networkManagerPluginBindings.RaceLog_setLogFile(file)

def RaceLog_get_this_thread_id_prefix():
    return _networkManagerPluginBindings.RaceLog_get_this_thread_id_prefix()

def RaceLog_cppDemangle(abiName):
    return _networkManagerPluginBindings.RaceLog_cppDemangle(abiName)

SDK_INVALID = _networkManagerPluginBindings.SDK_INVALID
SDK_OK = _networkManagerPluginBindings.SDK_OK
SDK_SHUTTING_DOWN = _networkManagerPluginBindings.SDK_SHUTTING_DOWN
SDK_PLUGIN_MISSING = _networkManagerPluginBindings.SDK_PLUGIN_MISSING
SDK_INVALID_ARGUMENT = _networkManagerPluginBindings.SDK_INVALID_ARGUMENT
SDK_QUEUE_FULL = _networkManagerPluginBindings.SDK_QUEUE_FULL
class SdkResponseC(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    status = property(_networkManagerPluginBindings.SdkResponseC_status_get, _networkManagerPluginBindings.SdkResponseC_status_set)
    queueUtilization = property(_networkManagerPluginBindings.SdkResponseC_queueUtilization_get, _networkManagerPluginBindings.SdkResponseC_queueUtilization_set)
    handle = property(_networkManagerPluginBindings.SdkResponseC_handle_get, _networkManagerPluginBindings.SdkResponseC_handle_set)

    def __init__(self):
        _networkManagerPluginBindings.SdkResponseC_swiginit(self, _networkManagerPluginBindings.new_SdkResponseC())
    __swig_destroy__ = _networkManagerPluginBindings.delete_SdkResponseC

# Register SdkResponseC in _networkManagerPluginBindings:
_networkManagerPluginBindings.SdkResponseC_swigregister(SdkResponseC)
NULL_RACE_HANDLE = cvar.NULL_RACE_HANDLE

class SdkResponse(SdkResponseC):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _networkManagerPluginBindings.SdkResponse_swiginit(self, _networkManagerPluginBindings.new_SdkResponse(*args))
    __swig_destroy__ = _networkManagerPluginBindings.delete_SdkResponse

# Register SdkResponse in _networkManagerPluginBindings:
_networkManagerPluginBindings.SdkResponse_swigregister(SdkResponse)


def sdkStatusToString(sdkStatus):
    return _networkManagerPluginBindings.sdkStatusToString(sdkStatus)


